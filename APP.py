import streamlit as st
from PIL import Image
import numpy as np
import scipy.stats as stats

# ---------------------------------------------------------------
# 1. Armazenamento em session_state para persist√™ncia
# ---------------------------------------------------------------
if "resultados" not in st.session_state:
    st.session_state.resultados = []  # Evapotranspira√ß√µes (modelo)
if "historico" not in st.session_state:
    st.session_state.historico = []  # Hist√≥rico de resultados
if "uploaded_image" not in st.session_state:
    st.session_state.uploaded_image = None

# ---------------------------------------------------------------
# 2. Fun√ß√µes auxiliares
# ---------------------------------------------------------------
def calculate_area_foliar_total(folhas_data, galhos):
    total_area = 0.0
    for largura_str, comprimento_str in folhas_data:
        try:
            largura = float(largura_str)
            comprimento = float(comprimento_str)
            total_area += (largura * comprimento) * galhos
        except ValueError:
            continue
    return total_area

def calculate_lai(area_foliar_total, area_copa):
    try:
        area_copa_val = float(area_copa)
        lai = area_foliar_total / area_copa_val
        return round(lai, 2)
    except (ZeroDivisionError, ValueError):
        return 0.0

def predict_evapotranspiration(image, altura, diametro, copa, lai):
    et = (altura * 0.5 + diametro * 0.3 + copa * 0.1 + lai * 0.2) * 10
    return round(et, 2)

# ---------------------------------------------------------------
# 3. Cabe√ßalho e t√≠tulo com √≠cone/emoji
# ---------------------------------------------------------------
st.title("üå± Estimativa de Evapotranspira√ß√£o por CNN (Vers√£o Ajustada)")

# ---------------------------------------------------------------
# 4. Carregar imagem
# ---------------------------------------------------------------
st.header("1) Carregar Imagem da Esp√©cie Arb√≥rea ou Arbustiva")
uploaded_file = st.file_uploader("üì∑ Fa√ßa o upload da imagem (formato JPG/PNG)", type=["jpg", "png"])
if uploaded_file is not None:
    st.session_state.uploaded_image = Image.open(uploaded_file)
    st.image(st.session_state.uploaded_image, caption="Imagem Carregada", use_container_width=True)

# ---------------------------------------------------------------
# 5. Dados dos esp√©cimes
# ---------------------------------------------------------------
st.header("2) Insira as Vari√°veis F√≠sicas dos Esp√©cimes")
num_especies = st.number_input("Quantidade de Esp√©cimes:", min_value=1, step=1, value=1)
especies_data = []
for i in range(num_especies):
    st.subheader(f"Esp√©cime {i+1}")
    altura = st.text_input(f"Altura (m) - Esp√©cime {i+1}:", "0")
    diametro = st.text_input(f"Di√¢metro do Tronco (cm) - Esp√©cime {i+1}:", "0")
    copa = st.text_input(f"√Årea da Copa (m¬≤) - Esp√©cime {i+1}:", "0")
    galhos = st.number_input(f"Quantidade de Galhos - Esp√©cime {i+1}:", min_value=1, step=1, value=1)
    folhas_data = []
    for j in range(galhos):
        st.markdown(f"**Galho {j+1}** - Esp√©cime {i+1}")
        largura_folha = st.text_input(f"Largura da Folha (cm) - Galho {j+1} - Esp√©cime {i+1}:", "0")
        comprimento_folha = st.text_input(f"Comprimento da Folha (cm) - Galho {j+1} - Esp√©cime {i+1}:", "0")
        folhas_data.append((largura_folha, comprimento_folha))
    especies_data.append((altura, diametro, copa, galhos, folhas_data))

# ---------------------------------------------------------------
# 6. C√°lculo da Evapotranspira√ß√£o (Modelo)
# ---------------------------------------------------------------
st.header("3) C√°lculo da Evapotranspira√ß√£o (Modelo)")
if st.button("üíß Calcular Evapotranspira√ß√£o"):
    st.session_state.resultados = []
    if st.session_state.uploaded_image is None:
        st.error("‚ö†Ô∏è √â necess√°rio carregar uma imagem antes de calcular.")
    else:
        for i, (altura_str, diametro_str, copa_str, galhos, folhas_data) in enumerate(especies_data):
            try:
                altura_val = float(altura_str)
                diametro_val = float(diametro_str)
                copa_val = float(copa_str)

                # Valida√ß√£o simples de intervalos (exemplo)
                if not (0.5 <= altura_val <= 100):
                    st.warning(f"‚ö†Ô∏è Altura do Esp√©cime {i+1} fora do intervalo plaus√≠vel (0,5m - 100m).\n"
                               f"**Interpreta√ß√£o:** Alturas fora deste intervalo podem indicar erros de entrada ou medi√ß√µes incorretas. Por favor, verifique os valores inseridos.")
                else:
                    st.success(f"Altura do Esp√©cime {i+1} est√° dentro do intervalo plaus√≠vel.")

                aft = calculate_area_foliar_total(folhas_data, galhos)
                lai_val = calculate_lai(aft, copa_val)
                et_val = predict_evapotranspiration(
                    st.session_state.uploaded_image,
                    altura_val,
                    diametro_val,
                    copa_val,
                    lai_val
                )
                st.session_state.resultados.append(et_val)
                st.write(f"üåø Evapotranspira√ß√£o estimada para o Esp√©cime {i+1}: {et_val} litros/dia")
                st.write("""
                **Explica√ß√£o:** Este valor mostra a evapotranspira√ß√£o estimada para cada esp√©cime, calculada com base no modelo.

                **Interpreta√ß√£o:** A evapotranspira√ß√£o estimada indica a quantidade de √°gua que √© liberada pelas folhas do esp√©cime para a atmosfera por dia, em litros. Se o valor for muito alto ou muito baixo em compara√ß√£o com os outros esp√©cimes, pode indicar a necessidade de ajustar os par√¢metros do modelo ou os dados de entrada.
                """)

                # Grava√ß√£o no hist√≥rico
                st.session_state.historico.append(f"Esp√©cime {i+1}: {et_val} litros/dia")
                
            except ValueError:
                st.error(f"‚ö†Ô∏è Esp√©cime {i+1}: Insira valores num√©ricos v√°lidos.")
                break

# ---------------------------------------------------------------
# 7. Hist√≥rico e Limpeza do Hist√≥rico
# ---------------------------------------------------------------
st.sidebar.header("üîÑ Hist√≥rico de C√°lculos")
if st.session_state.historico:
    for record in st.session_state.historico:
        st.sidebar.write(record)
else:
    st.sidebar.write("Nenhum c√°lculo realizado ainda.")

if st.sidebar.button("üßπ Limpar Hist√≥rico"):
    st.session_state.historico.clear()
    st.sidebar.write("‚úÖ Hist√≥rico limpo!")

# ---------------------------------------------------------------
# 8. Se√ß√£o Explicativa Expandida com F√≥rmulas e Interpreta√ß√µes
# ---------------------------------------------------------------
with st.expander("üîç Explica√ß√£o T√©cnica e Interpreta√ß√£o Detalhada"):
    st.markdown("### C√°lculos e F√≥rmulas")
    st.markdown("**√Årea Foliar Total (AFT):**")
    st.latex(r'''
    \text{AFT} = \sum_{i=1}^{n} (\text{largura}_i \times \text{comprimento}_i) \times \text{galhos}
    ''')
    st.markdown("**√çndice de √Årea Foliar (LAI):**")
    st.latex(r'''
    \text{LAI} = \frac{\text{AFT}}{\text{√Årea da Copa}}
    ''')
    st.markdown("**Evapotranspira√ß√£o (Modelo):**")
    st.latex(r'''
    \text{ET (litros/dia)} = 
    [0.5 \times \text{Altura (m)} + 0.3 \times \text{Di√¢metro (cm)} 
    + 0.1 \times \text{√Årea de Copa (m¬≤)} + 0.2 \times \text{LAI}] \times 10
    ''')
    
    st.markdown("""
    ## Testes Estat√≠sticos
    - **Teste t de Student:** Compara a m√©dia de um conjunto de dados com um valor hipot√©tico.
    - **Teste de Mann-Whitney:** Teste n√£o param√©trico que compara distribui√ß√µes; √∫til quando os dados n√£o seguem distribui√ß√£o normal.
    - **Teste de Wilcoxon:** Teste n√£o param√©trico que compara medianas de amostras pareadas ou diferen√ßas; √∫til para dados n√£o normais.
    - **Teste de Sinal:** Teste n√£o param√©trico simples baseado no sinal das diferen√ßas entre observa√ß√µes e um valor hipot√©tico.
    - **Diferen√ßa Absoluta:** Calcula a diferen√ßa direta entre a m√©dia experimental e o valor do modelo sem infer√™ncia estat√≠stica.

    Cada teste possui requisitos e interpreta√ß√µes espec√≠ficas. Escolha o teste adequado com base 
    no tamanho da amostra, distribui√ß√£o dos dados e tipo de hip√≥tese a ser testada.

    ## Melhores Pr√°ticas Finais
    - Validar dados de entrada: ex. altura entre 0,5m e 100m, di√¢metro em faixas plaus√≠veis, etc.
    - Incorporar dados clim√°ticos (temperatura, umidade, radia√ß√£o solar) para melhorar a precis√£o do modelo de evapotranspira√ß√£o.
    - Utilizar modelos avan√ßados, como **CNNs**, treinados com dados reais para estimar a evapotranspira√ß√£o.
    - Fornecer m√∫ltiplas medi√ß√µes para cada esp√©cime em diferentes condi√ß√µes para aumentar a robustez da contraprova.
    """)
