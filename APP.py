import streamlit as st
from PIL import Image
import numpy as np
import scipy.stats as stats
import pandas as pd  # Para DataFrame e gr√°ficos

# ---------------------------------------------------------------
# 1. Armazenamento em session_state para persist√™ncia
# ---------------------------------------------------------------
if "resultados" not in st.session_state:
    st.session_state.resultados = []
if "historico" not in st.session_state:
    st.session_state.historico = []
if "uploaded_image" not in st.session_state:
    st.session_state.uploaded_image = None

# ---------------------------------------------------------------
# 2. Fun√ß√µes auxiliares
# ---------------------------------------------------------------
def calculate_area_foliar_total(folhas_data, galhos):
    total_area = 0.0
    for largura_str, comprimento_str in folhas_data:
        try:
            largura = float(largura_str)
            comprimento = float(comprimento_str)
            total_area += (largura * comprimento) * galhos
        except ValueError:
            continue
    return total_area

def calculate_lai(area_foliar_total, area_copa):
    try:
        area_copa_val = float(area_copa)
        if area_copa_val <= 0:
            return 0.0
        lai = area_foliar_total / area_copa_val
        return round(lai, 2)
    except (ZeroDivisionError, ValueError):
        return 0.0

def predict_evapotranspiration(image, altura, diametro, copa, lai):
    et = (altura * 0.5 + diametro * 0.3 + copa * 0.1 + lai * 0.2) * 10
    return round(et, 2)

# ---------------------------------------------------------------
# 3. Cabe√ßalho e t√≠tulo com √≠cone/emoji
# ---------------------------------------------------------------
st.title("üå± Estimativa de Evapotranspira√ß√£o por CNN (Vers√£o Ajustada)")

# ---------------------------------------------------------------
# 4. Carregar imagem
# ---------------------------------------------------------------
st.header("1) Carregar Imagem da Esp√©cie Arb√≥rea ou Arbustiva")
uploaded_file = st.file_uploader("üì∑ Fa√ßa o upload da imagem (formato JPG/PNG)", type=["jpg", "png"])
if uploaded_file is not None:
    try:
        st.session_state.uploaded_image = Image.open(uploaded_file)
        st.image(st.session_state.uploaded_image, caption="Imagem Carregada", use_column_width=True)
    except Exception as e:
        st.error(f"‚ö†Ô∏è Erro ao carregar a imagem: {e}")

# ---------------------------------------------------------------
# 5. Dados dos esp√©cimes
# ---------------------------------------------------------------
st.header("2) Insira as Vari√°veis F√≠sicas dos Esp√©cimes")
num_especies = st.number_input("üî¢ Quantidade de Esp√©cimes:", min_value=1, step=1, value=1)
especies_data = []
for i in range(num_especies):
    st.subheader(f"üåø Esp√©cime {i+1}")
    altura = st.text_input(f"üìè Altura (m) - Esp√©cime {i+1}:", "0")
    diametro = st.text_input(f"üìê Di√¢metro do Tronco (cm) - Esp√©cime {i+1}:", "0")
    copa = st.text_input(f"üå≥ √Årea da Copa (m¬≤) - Esp√©cime {i+1}:", "0")
    galhos = st.number_input(f"üåø Quantidade de Galhos - Esp√©cime {i+1}:", min_value=1, step=1, value=1)
    folhas_data = []
    for j in range(galhos):
        st.markdown(f"**üå± Galho {j+1} - Esp√©cime {i+1}**")
        largura_folha = st.text_input(f"Largura da Folha (cm) - Galho {j+1}:", "0")
        comprimento_folha = st.text_input(f"Comprimento da Folha (cm) - Galho {j+1}:", "0")
        folhas_data.append((largura_folha, comprimento_folha))
    especies_data.append((altura, diametro, copa, galhos, folhas_data))

# ---------------------------------------------------------------
# 6. C√°lculo da Evapotranspira√ß√£o (Modelo)
# ---------------------------------------------------------------
st.header("3) C√°lculo da Evapotranspira√ß√£o (Modelo)")
if st.button("üíß Calcular Evapotranspira√ß√£o"):
    st.session_state.resultados = []
    if st.session_state.uploaded_image is None:
        st.error("‚ö†Ô∏è √â necess√°rio carregar uma imagem antes de calcular.")
    else:
        for i, (altura_str, diametro_str, copa_str, galhos, folhas_data) in enumerate(especies_data):
            try:
                altura_val = float(altura_str)
                diametro_val = float(diametro_str)
                copa_val = float(copa_str)

                # Valida√ß√£o simples de intervalos (exemplo)
                if not (0.5 <= altura_val <= 100):
                    st.warning(f"‚ö†Ô∏è Altura do Esp√©cime {i+1} fora do intervalo plaus√≠vel (0,5m - 100m).\n"
                               "**Interpreta√ß√£o:** Alturas fora deste intervalo podem indicar erros de entrada ou medi√ß√µes incorretas. Por favor, verifique os valores inseridos.")
                else:
                    st.success(f"‚úÖ Altura do Esp√©cime {i+1} est√° dentro do intervalo plaus√≠vel.")

                aft = calculate_area_foliar_total(folhas_data, galhos)
                lai_val = calculate_lai(aft, copa_val)
                et_val = predict_evapotranspiration(
                    st.session_state.uploaded_image,
                    altura_val,
                    diametro_val,
                    copa_val,
                    lai_val
                )
                st.session_state.resultados.append(et_val)
                st.write(f"üåø **Evapotranspira√ß√£o estimada para o Esp√©cime {i+1}:** {et_val} litros/dia")
                st.write("""
                **Explica√ß√£o:** Este valor mostra a evapotranspira√ß√£o estimada para cada esp√©cime, calculada com base no modelo.

                **Interpreta√ß√£o:** A evapotranspira√ß√£o estimada indica a quantidade de √°gua que √© liberada pelas folhas do esp√©cime para a atmosfera por dia, em litros. Se o valor for muito alto ou muito baixo em compara√ß√£o com os outros esp√©cimes, pode indicar a necessidade de ajustar os par√¢metros do modelo ou os dados de entrada.
                """)

                # Adicionar ao hist√≥rico como tupla (Esp√©cime, Valor)
                st.session_state.historico.append((i+1, et_val))

            except ValueError:
                st.error(f"‚ö†Ô∏è Esp√©cime {i+1}: Insira valores num√©ricos v√°lidos.")
                break

# ---------------------------------------------------------------
# 7. Contraprova Experimental
# ---------------------------------------------------------------
st.header("4) Contraprova Experimental com M√∫ltiplas Medi√ß√µes")
num_experimentos = st.number_input("üî¢ Quantidade de medi√ß√µes experimentais para cada Esp√©cime:", min_value=1, step=1, value=1)
contraprovas = {}
for i in range(num_especies):
    st.subheader(f"üåø Esp√©cime {i+1} - Valores Experimentais (mL)")
    valores_experimentais = []
    for j in range(num_experimentos):
        val = st.text_input(f"Medi√ß√£o {j+1} (mL) - Esp√©cime {i+1}:", "0")
        valores_experimentais.append(val)
    contraprovas[i] = valores_experimentais
tempo_coleta_horas = st.number_input("‚è±Ô∏è Tempo (horas) de coleta para cada medi√ß√£o:", min_value=1, step=1, value=24)

# ---------------------------------------------------------------
# 8. Escolha do Teste Estat√≠stico e Compara√ß√£o
# ---------------------------------------------------------------
st.header("5) Escolha o Teste Estat√≠stico")
test_type = st.selectbox(
    "üìä Escolha o teste estat√≠stico para compara√ß√£o:",
    ("Teste t de Student (1 amostra)",
     "Teste de Mann-Whitney",
     "Teste de Wilcoxon",
     "Teste de Sinal",
     "Diferen√ßa Absoluta")
)

if st.button("üîÑ Comparar com a Contraprova"):
    if len(st.session_state.resultados) == num_especies:
        for i in range(num_especies):
            st.markdown(f"---\n**üåø Esp√©cime {i+1}:**")
            try:
                # Converter valores experimentais para float
                valores_exp_float = [float(x) for x in contraprovas[i]]
                evap_exps = []
                for vol_mL in valores_exp_float:
                    vol_L = vol_mL / 1000.0
                    vol_L_dia = vol_L / (tempo_coleta_horas / 24.0)
                    evap_exps.append(vol_L_dia)

                st.write("üå°Ô∏è **Medi√ß√µes (litros/dia):**", [f"{v:.2f}" for v in evap_exps])
                st.write("""
                **Explica√ß√£o:** Estas s√£o as medi√ß√µes experimentais de evapotranspira√ß√£o convertidas para litros por dia.

                **Interpreta√ß√£o:** A evapotranspira√ß√£o experimental reflete os valores observados diretamente. Comparar estas medi√ß√µes com as estimadas pelo modelo permite avaliar a precis√£o do modelo.
                """)
                media_experimental = np.mean(evap_exps)
                et_modelo = st.session_state.resultados[i]
                st.write(f"üìä **M√©dia experimental:** {media_experimental:.2f} litros/dia")
                st.write("""
                **Explica√ß√£o:** Exibe a m√©dia das medi√ß√µes experimentais de evapotranspira√ß√£o, que s√£o coletadas diretamente.

                **Interpreta√ß√£o:** Esta m√©dia reflete o valor central das medi√ß√µes experimentais. Se a m√©dia experimental for semelhante ao valor previsto pelo modelo, isso sugere que o modelo est√° representando adequadamente a evapotranspira√ß√£o. Caso contr√°rio, pode ser necess√°rio investigar as causas da discrep√¢ncia.
                """)
                st.write(f"üîÆ **Valor previsto pelo modelo:** {et_modelo:.2f} litros/dia")
                st.write("""
                **Explica√ß√£o:** Exibe o valor previsto pelo modelo de evapotranspira√ß√£o, calculado com base nas vari√°veis inseridas (altura, di√¢metro, copa, LAI).

                **Interpreta√ß√£o:** Este √© o valor que o modelo estima para a evapotranspira√ß√£o do esp√©cime. Comparar esse valor com as medi√ß√µes experimentais ajuda a avaliar a precis√£o do modelo. Uma diferen√ßa muito grande pode indicar que o modelo precisa ser aprimorado.
                """)

                valores_unicos = set(evap_exps)
                if len(evap_exps) < 2 or len(valores_unicos) < 2:
                    st.warning(
                        "‚ö†Ô∏è N√£o √© poss√≠vel realizar o teste com uma √∫nica medi√ß√£o ou valores id√™nticos. "
                        "O teste exige pelo menos 2 valores distintos.\n"
                        "‚úÖ Recomenda-se coletar mais medi√ß√µes em diferentes condi√ß√µes para an√°lises mais robustas."
                    )
                    diferenca_abs = abs(media_experimental - et_modelo)
                    st.write(f"üìâ **Diferen√ßa (modelo x experimento):** {diferenca_abs:.2f} litros/dia")
                    st.write("""
                    **Explica√ß√£o:** Mostra a diferen√ßa absoluta entre o valor do modelo e o valor experimental.

                    **Interpreta√ß√£o:** A diferen√ßa absoluta fornece uma medida direta de qu√£o distante o modelo est√° das medi√ß√µes experimentais. Se a diferen√ßa for pequena, isso indica que o modelo est√° ajustado corretamente; se for grande, pode ser necess√°rio revisar o modelo ou os dados experimentais.
                    """)
                else:
                    p_value = None
                    if test_type == "Teste t de Student (1 amostra)":
                        stat, p_value = stats.ttest_1samp(evap_exps, et_modelo)
                        st.write(f"üìà **T-estat√≠stica:** {stat:.4f}")
                        st.write("""
                        **Explica√ß√£o:** A T-estat√≠stica quantifica a diferen√ßa entre a m√©dia experimental e o valor do modelo, normalizada pela variabilidade dos dados.

                        **Interpreta√ß√£o:** Quanto maior for o valor absoluto da T-estat√≠stica, mais significativa ser√° a diferen√ßa entre a m√©dia experimental e o valor do modelo.
                        """)
                        st.write(f"üî¢ **P-valor:** {p_value:.6f}")
                        st.write("""
                        **Explica√ß√£o:** O P-valor indica a probabilidade de observarmos uma diferen√ßa t√£o extrema quanto a observada, assumindo que a hip√≥tese nula seja verdadeira.

                        **Interpreta√ß√£o:** 
                        - **Se p < 0,05**: A diferen√ßa √© estatisticamente significativa. Rejeitamos a hip√≥tese nula de que n√£o h√° diferen√ßa entre a m√©dia experimental e o valor do modelo.
                        - **Se p ‚â• 0,05**: A diferen√ßa n√£o √© estatisticamente significativa. N√£o temos evid√™ncias suficientes para rejeitar a hip√≥tese nula.
                        """)

                    elif test_type == "Teste de Mann-Whitney":
                        # Comparando com uma distribui√ß√£o constante (et_modelo)
                        stat, p_value = stats.mannwhitneyu(evap_exps, [et_modelo]*len(evap_exps), alternative='two-sided')
                        st.write(f"üìâ **Estat√≠stica U:** {stat:.4f}")
                        st.write("""
                        **Explica√ß√£o:** A Estat√≠stica U mede a diferen√ßa entre as distribui√ß√µes dos dados experimentais e do modelo.

                        **Interpreta√ß√£o:** 
                        - **Valores U baixos** indicam uma grande diferen√ßa entre as distribui√ß√µes.
                        - **Valores U altos** indicam uma menor diferen√ßa entre as distribui√ß√µes.
                        """)
                        st.write(f"üî¢ **P-valor (Mann-Whitney):** {p_value:.6f}")
                        st.write("""
                        **Explica√ß√£o:** O P-valor determina se a diferen√ßa observada nas distribui√ß√µes √© significativa.

                        **Interpreta√ß√£o:** 
                        - **Se p < 0,05**: As distribui√ß√µes s√£o significativamente diferentes. Rejeitamos a hip√≥tese nula de que as distribui√ß√µes s√£o id√™nticas.
                        - **Se p ‚â• 0,05**: As distribui√ß√µes n√£o s√£o significativamente diferentes. N√£o rejeitamos a hip√≥tese nula.
                        """)

                    elif test_type == "Teste de Wilcoxon":
                        differences = np.array(evap_exps) - et_modelo
                        if np.all(differences == 0):
                            st.warning("‚ö†Ô∏è Diferen√ßas nulas impossibilitam o teste Wilcoxon.\n"
                                       "**Interpreta√ß√£o:** Isso ocorre quando todas as medi√ß√µes s√£o id√™nticas ao valor do modelo.")
                        else:
                            try:
                                stat, p_value = stats.wilcoxon(differences)
                                st.write(f"üìà **Estat√≠stica W:** {stat:.4f}")
                                st.write("""
                                **Explica√ß√£o:** A Estat√≠stica W do Teste de Wilcoxon mede a soma das diferen√ßas ordenadas das medi√ß√µes experimentais em rela√ß√£o ao modelo.

                                **Interpreta√ß√£o:** 
                                - **W alto**: Indica uma grande diferen√ßa entre as amostras pareadas.
                                - **W baixo**: Indica uma diferen√ßa menor.
                                """)
                                st.write(f"üî¢ **P-valor (Wilcoxon):** {p_value:.6f}")
                                st.write("""
                                **Explica√ß√£o:** O P-valor determina se a diferen√ßa observada nas medi√ß√µes pareadas √© significativa.

                                **Interpreta√ß√£o:** 
                                - **Se p < 0,05**: A diferen√ßa √© estatisticamente significativa. Rejeitamos a hip√≥tese nula de que n√£o h√° diferen√ßa nas medianas das amostras pareadas.
                                - **Se p ‚â• 0,05**: A diferen√ßa n√£o √© estatisticamente significativa. N√£o rejeitamos a hip√≥tese nula.
                                """)
                            except Exception as e:
                                st.error(f"‚ö†Ô∏è Erro no teste de Wilcoxon: {e}")

                    elif test_type == "Teste de Sinal":
                        differences = np.array(evap_exps) - et_modelo
                        nonzero_diff = differences[differences != 0]
                        n = len(nonzero_diff)
                        if n == 0:
                            st.warning("‚ö†Ô∏è Todos os valores experimentais s√£o iguais ao valor do modelo.\n"
                                       "**Interpreta√ß√£o:** O teste de Sinal n√£o pode ser aplicado quando todas as diferen√ßas s√£o nulas.")
                        else:
                            pos = np.sum(nonzero_diff > 0)
                            res = stats.binomtest(pos, n, 0.5)
                            st.write(f"üìä **N√∫mero de diferen√ßas n√£o-nulas:** {n}")
                            st.write("""
                            **Explica√ß√£o:** Este valor indica quantas das diferen√ßas entre as medi√ß√µes experimentais e o modelo s√£o positivas.

                            **Interpreta√ß√£o:** 
                            - **Maior n√∫mero de sinais positivos**: Mais medi√ß√µes est√£o acima do modelo.
                            - **Maior n√∫mero de sinais negativos**: Mais medi√ß√µes est√£o abaixo do modelo.
                            """)
                            st.write(f"üìà **N√∫mero de sinais positivos:** {pos}")
                            st.write(f"üî¢ **P-valor (Teste de Sinal):** {res.pvalue:.6f}")
                            st.write("""
                            **Explica√ß√£o:** O P-valor determina se a propor√ß√£o de sinais positivos √© significativamente diferente de 0,5.

                            **Interpreta√ß√£o:** 
                            - **Se p < 0,05**: A propor√ß√£o de sinais positivos √© significativamente diferente de 0,5, indicando uma tend√™ncia estat√≠stica.
                            - **Se p ‚â• 0,05**: N√£o h√° evid√™ncias suficientes para afirmar que a propor√ß√£o difere de 0,5.
                            """)

                    else:  # Diferen√ßa Absoluta
                        diferenca_abs = abs(media_experimental - et_modelo)
                        st.write(f"üìâ **Diferen√ßa Absoluta (modelo x experimento):** {diferenca_abs:.2f} litros/dia")
                        st.write("""
                        **Explica√ß√£o:** Calcula a diferen√ßa direta entre o valor previsto pelo modelo e a m√©dia das medi√ß√µes experimentais.

                        **Interpreta√ß√£o:** 
                        - **Diferen√ßa pequena**: O modelo est√° ajustado corretamente.
                        - **Diferen√ßa grande**: Revisar modelo ou dados experimentais.
                        """)

                    if p_value is not None:
                        alpha = 0.05
                        if p_value < alpha:
                            st.error("‚ùå **Diferen√ßa estatisticamente significativa (p < 0.05).**")
                            st.write("""
                            **Interpreta√ß√£o:** A diferen√ßa entre o modelo e as medi√ß√µes √© significativa. O modelo pode precisar de ajustes.
                            """)
                        else:
                            st.info("‚úÖ **Diferen√ßa n√£o √© estatisticamente significativa (p ‚â• 0.05).**")
                            st.write("""
                            **Interpreta√ß√£o:** N√£o h√° diferen√ßa significativa entre o modelo e as medi√ß√µes. O modelo parece adequado.
                            """)
            except ValueError:
                st.error(f"‚ö†Ô∏è Esp√©cime {i+1}: Insira valores experimentais v√°lidos (n√∫meros).")
    else:
        st.warning("‚ö†Ô∏è √â necess√°rio primeiro calcular a evapotranspira√ß√£o pelo modelo para todos os esp√©cimes.")

# ---------------------------------------------------------------
# 9. Exibi√ß√£o do Hist√≥rico e Gr√°fico na Segunda Coluna
# ---------------------------------------------------------------
col1, col2 = st.columns(2)
with col2:
    st.header("üìã Hist√≥rico de Resultados e Gr√°fico")
    if st.session_state.historico:
        # Criar DataFrame a partir do hist√≥rico
        data = {'Esp√©cime': [], 'Evapotranspira√ß√£o (litros/dia)': []}
        for rec in st.session_state.historico:
            data['Esp√©cime'].append(rec[0])
            data['Evapotranspira√ß√£o (litros/dia)'].append(rec[1])
        df_hist = pd.DataFrame(data)
        st.dataframe(df_hist)
        st.line_chart(df_hist.set_index('Esp√©cime')['Evapotranspira√ß√£o (litros/dia)'])
    else:
        st.write("Nenhum c√°lculo realizado ainda.")

# ---------------------------------------------------------------
# 10. Hist√≥rico e Limpeza do Hist√≥rico na Sidebar
# ---------------------------------------------------------------
st.sidebar.header("üîÑ Hist√≥rico de C√°lculos")
if st.session_state.historico:
    for record in st.session_state.historico:
        st.sidebar.write(f"üåø Esp√©cime {record[0]}: {record[1]} litros/dia")
else:
    st.sidebar.write("Nenhum c√°lculo realizado ainda.")

if st.sidebar.button("üßπ Limpar Hist√≥rico"):
    st.session_state.historico.clear()
    st.sidebar.write("‚úÖ Hist√≥rico limpo!")

# ---------------------------------------------------------------
# 11. Se√ß√£o Explicativa Expandida com F√≥rmulas e Interpreta√ß√µes
# ---------------------------------------------------------------
with st.expander("üîç Explica√ß√£o T√©cnica e Interpreta√ß√£o Detalhada"):
    st.markdown("### üìö C√°lculos e F√≥rmulas")
    st.markdown("**√Årea Foliar Total (AFT):**")
    st.latex(r'''
    \text{AFT} = \sum_{i=1}^{n} (\text{largura}_i \times \text{comprimento}_i) \times \text{galhos}
    ''')
    st.markdown("**√çndice de √Årea Foliar (LAI):**")
    st.latex(r'''
    \text{LAI} = \frac{\text{AFT}}{\text{√Årea da Copa}}
    ''')
    st.markdown("**Evapotranspira√ß√£o (Modelo):**")
    st.latex(r'''
    \text{ET (litros/dia)} = 
    [0.5 \times \text{Altura (m)} + 0.3 \times \text{Di√¢metro (cm)} 
    + 0.1 \times \text{√Årea da Copa (m¬≤)} + 0.2 \times \text{LAI}] \times 10
    ''')
    st.markdown("""
    ## üìä Testes Estat√≠sticos
    - **Teste t de Student:** Compara a m√©dia de um conjunto de dados com um valor hipot√©tico.
    - **Teste de Mann-Whitney:** Teste n√£o param√©trico que compara distribui√ß√µes; √∫til quando os dados n√£o seguem distribui√ß√£o normal.
    - **Teste de Wilcoxon:** Teste n√£o param√©trico que compara medianas de amostras pareadas ou diferen√ßas; √∫til para dados n√£o normais.
    - **Teste de Sinal:** Teste n√£o param√©trico simples baseado no sinal das diferen√ßas entre observa√ß√µes e um valor hipot√©tico.
    - **Diferen√ßa Absoluta:** Calcula a diferen√ßa direta entre a m√©dia experimental e o valor do modelo sem infer√™ncia estat√≠stica.

    Cada teste possui requisitos e interpreta√ß√µes espec√≠ficas. Escolha o teste adequado com base 
    no tamanho da amostra, distribui√ß√£o dos dados e tipo de hip√≥tese a ser testada.

    ## üõ†Ô∏è Melhores Pr√°ticas Finais
    - **Validar dados de entrada:** Ex.: altura entre 0,5m e 100m, di√¢metro em faixas plaus√≠veis, etc.
    - **Incorporar dados clim√°ticos:** Temperatura, umidade, radia√ß√£o solar para maior precis√£o.
    - **Utilizar modelos avan√ßados:** Como **CNNs**, treinados com dados reais para estimar evapotranspira√ß√£o.
    - **Fornecer m√∫ltiplas medi√ß√µes:** Para cada esp√©cime em diferentes condi√ß√µes para robustez.
    """)

# ---------------------------------------------------------------
# 12. Avalia√ß√£o Pr√°tica M√°xima
# ---------------------------------------------------------------
st.header("6) Avalia√ß√£o Pr√°tica M√°xima")

st.markdown("""
Ap√≥s realizar os c√°lculos e an√°lises estat√≠sticas, √© importante validar os resultados obtidos para garantir a precis√£o e confiabilidade do modelo de evapotranspira√ß√£o.

### üìù Passos para Avalia√ß√£o Pr√°tica:
1. **Compara√ß√£o com Dados Reais:**
   - Compare os valores de evapotranspira√ß√£o estimados com medi√ß√µes de campo ou dados de estudos cient√≠ficos para verificar a acur√°cia do modelo.

2. **An√°lise de Sensibilidade:**
   - Avalie como altera√ß√µes nas vari√°veis de entrada (altura, di√¢metro, √°rea da copa, LAI) afetam a evapotranspira√ß√£o estimada.
   - Identifique quais vari√°veis t√™m maior impacto no resultado final.

3. **Valida√ß√£o Cruzada:**
   - Utilize diferentes conjuntos de dados para treinar e testar o modelo, assegurando que ele generaliza bem para diferentes condi√ß√µes.

4. **Incorpora√ß√£o de Fatores Clim√°ticos:**
   - Para aumentar a precis√£o, considere incluir vari√°veis clim√°ticas como temperatura, umidade, e radia√ß√£o solar no modelo de evapotranspira√ß√£o.

5. **Feedback de Especialistas:**
   - Consulte especialistas em bot√¢nica ou agronomia para interpretar os resultados e fornecer insights adicionais sobre a precis√£o do modelo.

6. **Aprimoramento Cont√≠nuo:**
   - Utilize os resultados das valida√ß√µes para ajustar os coeficientes do modelo e melhorar sua precis√£o.
   - Considere utilizar t√©cnicas de aprendizado de m√°quina mais avan√ßadas para refinar as estimativas.

### üìà Visualiza√ß√µes Adicionais:
Para uma melhor compreens√£o dos resultados, voc√™ pode adicionar visualiza√ß√µes adicionais, como:
- **Histograma** das evapotranspira√ß√µes estimadas para identificar a distribui√ß√£o dos dados.
- **Boxplot** para comparar as medi√ß√µes experimentais e as estimativas do modelo.
- **Mapa de Calor** se estiver trabalhando com m√∫ltiplas vari√°veis clim√°ticas.

### üîÑ Repetibilidade:
- **Documenta√ß√£o:** Mantenha uma documenta√ß√£o clara dos passos e metodologias utilizadas.
- **Reprodutibilidade:** Assegure que o aplicativo possa ser utilizado por outros usu√°rios com facilidade, permitindo a reprodutibilidade das an√°lises.

### üõ°Ô∏è Confiabilidade:
- **Valida√ß√£o dos Dados:** Certifique-se de que os dados de entrada s√£o precisos e confi√°veis.
- **Tratamento de Erros:** Implemente tratamentos de erros robustos para lidar com entradas inv√°lidas ou inconsistentes.

### üìÖ Atualiza√ß√µes Futuras:
- **Integra√ß√£o com Bancos de Dados:** Armazene os resultados em um banco de dados para an√°lises futuras e hist√≥rico persistente.
- **Interface Melhorada:** Adicione mais funcionalidades interativas, como filtros para o hist√≥rico ou op√ß√µes avan√ßadas de visualiza√ß√£o.
- **Machine Learning:** Integre modelos de aprendizado de m√°quina para melhorar as estimativas com base em grandes conjuntos de dados.

### üöÄ Conclus√£o:
A avalia√ß√£o pr√°tica √© essencial para garantir que o modelo de evapotranspira√ß√£o seja preciso e confi√°vel. Utilize os passos e melhores pr√°ticas acima para validar e aprimorar continuamente seu aplicativo, garantindo que ele atenda √†s necessidades dos usu√°rios de forma eficaz e eficiente.
""")

