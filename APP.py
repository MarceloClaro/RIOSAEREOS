import streamlit as st
from PIL import Image
import numpy as np
import scipy.stats as stats
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

# ---------------------------------------------------------------
# 1. Configura√ß√µes da P√°gina e Estado da Sess√£o
# ---------------------------------------------------------------
st.set_page_config(layout="wide", page_title="PhD EvapoCarbon Estimator", page_icon="üå≥")

# Inicializa√ß√£o do estado da sess√£o
if "resultados_modelo" not in st.session_state:
    st.session_state.resultados_modelo = [] # Armazena dicts com todos os resultados por esp√©cime
if "uploaded_image" not in st.session_state:
    st.session_state.uploaded_image = None
if "et_model_coeffs" not in st.session_state:
    st.session_state.et_model_coeffs = {
        "altura": 0.3, "diametro": 0.2, "copa": 0.1, "lai": 0.2,
        "temperatura": 0.1, "umidade": 0.05, "radiacao": 0.03, "vento": 0.02,
        "fator_escala": 10.0
    }
if "carbon_model_coeffs" not in st.session_state:
    st.session_state.carbon_model_coeffs = {
        "k_aft_carbon": 0.005, # kg C / m¬≤ AFT / dia
        "c_et_wue_carbon": 0.002 # kg C / L ET / dia (considerando uma WUE hipot√©tica)
    }

# ---------------------------------------------------------------
# 2. Fun√ß√µes Cient√≠ficas e de C√°lculo
# ---------------------------------------------------------------
def calculate_area_foliar_total(folhas_data_list, galhos_principais):
    """Calcula a √Årea Foliar Total (AFT) em m¬≤."""
    area_foliar_total_m2 = 0.0
    if not folhas_data_list:
        return 0.0

    # Assume que folhas_data_list cont√©m tuplas (largura_cm_str, comprimento_cm_str)
    # Calcula a √°rea m√©dia de uma folha de exemplo em m¬≤
    soma_area_folhas_exemplo_m2 = 0
    num_folhas_validas = 0
    for largura_str, comprimento_str in folhas_data_list:
        try:
            largura_m = float(largura_str) / 100.0
            comprimento_m = float(comprimento_str) / 100.0
            soma_area_folhas_exemplo_m2 += (largura_m * comprimento_m) # √Årea de uma folha em m¬≤
            num_folhas_validas +=1
        except ValueError:
            continue # Ignora entradas inv√°lidas

    if num_folhas_validas == 0:
        return 0.0

    area_media_folha_m2 = soma_area_folhas_exemplo_m2 / num_folhas_validas

    # Estimativa MUITO simplificada: AFT = area_media_folha * num_folhas_por_galho_principal * num_galhos_principais
    # Para um estudo de doutorado, isso seria muito mais complexo (e.g., alometria, amostragem estratificada)
    # Vamos assumir um n√∫mero hipot√©tico de folhas por galho principal para ilustra√ß√£o
    num_folhas_estimado_por_galho = st.session_state.get(f"num_folhas_por_galho_estimado", 50) # Default, pode ser ajustado
    area_foliar_total_m2 = area_media_folha_m2 * num_folhas_estimado_por_galho * galhos_principais
    return area_foliar_total_m2

def calculate_lai(area_foliar_total_m2, area_copa_m2_str):
    """Calcula o √çndice de √Årea Foliar (LAI)."""
    try:
        area_copa_m2 = float(area_copa_m2_str)
        if area_copa_m2 <= 0:
            return 0.0
        lai = area_foliar_total_m2 / area_copa_m2
        return round(lai, 3)
    except (ZeroDivisionError, ValueError):
        return 0.0

def predict_evapotranspiration_phd(
    altura_m, diametro_cm, area_copa_m2, lai,
    temperatura_c, umidade_perc, radiacao_mj_m2_dia, vento_m_s,
    coeffs, image_data=None # image_data n√£o usado neste modelo, mas poderia ser em ML
    ):
    """
    Prev√™ a Evapotranspira√ß√£o (ET) em litros/dia usando um modelo linear ponderado.
    Para um estudo de PhD, este modelo seria substitu√≠do por um biof√≠sico (Penman-Monteith)
    ou um modelo de Machine Learning treinado e validado.
    Os coeficientes (coeffs) s√£o demonstrativos e necessitariam de calibra√ß√£o rigorosa.
    """
    diametro_m = diametro_cm / 100.0
    umidade_frac = umidade_perc / 100.0

    et = (
        altura_m * coeffs["altura"] +
        diametro_m * coeffs["diametro"] +
        area_copa_m2 * coeffs["copa"] +
        lai * coeffs["lai"] +
        temperatura_c * coeffs["temperatura"] +
        umidade_frac * coeffs["umidade"] +
        radiacao_mj_m2_dia * coeffs["radiacao"] +
        vento_m_s * coeffs["vento"]
    ) * coeffs["fator_escala"]
    return round(et, 2)

def estimate_carbon_absorption_phd(area_foliar_total_m2, et_litros_dia, coeffs_carbon, especie_info=None):
    """
    Estima a absor√ß√£o de carbono (kg C/dia) de forma simplificada.
    Para um estudo de PhD, isso envolveria modelos ecofisiol√≥gicos complexos,
    considerando fotoss√≠ntese, respira√ß√£o, aloca√ß√£o de biomassa, WUE espec√≠fica da esp√©cie, etc.
    """
    # Estimativa baseada em AFT (mais direta, mas ainda muito simplificada)
    # k_aft_carbon: taxa m√©dia de fixa√ß√£o de C por m¬≤ de folha por dia. Varia enormemente.
    carbono_via_aft = area_foliar_total_m2 * coeffs_carbon["k_aft_carbon"]

    # Estimativa baseada em ET e WUE (muito indireta e conceitual)
    # c_et_wue_carbon: kg de C fixado por Litro de √°gua transpirada.
    # Isso √© uma proxy para a Efici√™ncia no Uso da √Ågua (WUE = Carbono ganho / √Ågua perdida).
    # Varia drasticamente com esp√©cie, CO2 atmosf√©rico, VPD, etc.
    carbono_via_et_wue = et_litros_dia * coeffs_carbon["c_et_wue_carbon"]

    # Para esta ferramenta, podemos apresentar ambas ou uma m√©dia, com muitas ressalvas.
    # Vamos retornar uma m√©dia ponderada ou a mais defens√°vel (AFT, com ressalvas).
    # Para uma banca, a discuss√£o sobre como obter k_aft_carbon e c_et_wue_carbon seria crucial.
    # Ex: k_aft_carbon poderia vir de taxas fotossint√©ticas l√≠quidas m√©dias para esp√©cies da Caatinga.
    # Ex: c_et_wue_carbon viria de estudos de WUE para essas esp√©cies.

    # No contexto desta ferramenta, vamos usar a estimativa via AFT como principal,
    # pois √© um pouco menos indireta que a via ET/WUE sem dados de WUE.
    return round(carbono_via_aft, 4), round(carbono_via_et_wue, 4)

# ---------------------------------------------------------------
# 3. Interface Streamlit
# ---------------------------------------------------------------
st.title("üå≥ Plataforma Avan√ßada de Estimativa de Evapotranspira√ß√£o e An√°lise de Carbono para Ecossistemas Semi√°ridos")
st.subheader("Foco: Regi√£o de Crate√∫s, Cear√°, Brasil - Ferramenta de Suporte √† Pesquisa de Doutorado")
st.markdown("---")

# --- Coluna da Esquerda: Entradas e Controles ---
left_column, right_column = st.columns([2, 3])

with left_column:
    st.header("‚öôÔ∏è Entradas e Configura√ß√µes do Modelo")

    with st.expander("üñºÔ∏è 1. Identifica√ß√£o Visual do Esp√©cime (Opcional)", expanded=True):
        uploaded_file = st.file_uploader("Carregar imagem do esp√©cime (JPG/PNG)", type=["jpg", "png"], key="img_uploader")
        if uploaded_file is not None:
            try:
                st.session_state.uploaded_image = Image.open(uploaded_file)
            except Exception as e:
                st.error(f"Erro ao carregar imagem: {e}")
        if st.session_state.uploaded_image:
            st.image(st.session_state.uploaded_image, caption="Imagem Carregada", use_column_width=True)

    with st.expander("üåø 2. Dados Biom√©tricos e Estruturais do Esp√©cime", expanded=True):
        num_especimes = st.number_input("N√∫mero de Esp√©cimes para An√°lise:", min_value=1, step=1, value=1, key="num_especimes_input")
        st.session_state.especimes_data_list = [] # Lista para armazenar dados de cada esp√©cime

        for i in range(num_especimes):
            st.markdown(f"--- \n **Esp√©cime {i+1}**")
            especime_id_user = st.text_input(f"Identificador do Esp√©cime {i+1} (e.g., Tag001, EspecieX-LocalY):", f"Esp√©cime_{i+1}", key=f"id_especime_{i}")
            altura_m_str = st.text_input(f"üìè Altura Total (m) - Esp√©cime {i+1}:", "2.5", key=f"altura_m_{i}")
            diametro_cm_str = st.text_input(f"üìê Di√¢metro √† Altura do Peito (DAP) ou do Tronco (cm) - Esp√©cime {i+1}:", "15", key=f"diametro_cm_{i}")
            area_copa_m2_str = st.text_input(f"üå≥ √Årea da Copa Projetada no Solo (m¬≤) - Esp√©cime {i+1}:", "3.0", key=f"area_copa_m2_{i}")
            galhos_principais = st.number_input(f"üåø N√∫mero Estimado de Galhos Estruturais Principais - Esp√©cime {i+1}:", min_value=1, value=5, step=1, key=f"galhos_princ_{i}")
            st.session_state[f"num_folhas_por_galho_estimado_{i}"] = st.number_input(f"üçÇ N√∫mero M√©dio Estimado de Folhas por Galho Principal - Esp√©cime {i+1}:", min_value=1, value=50, step=5, key=f"num_folhas_galho_est_{i}", help="Este √© um par√¢metro crucial e dif√≠cil. Em uma pesquisa real, exigiria amostragem e estudo alom√©trico.")

            st.markdown(f"**Medidas de Folhas de Amostra (Esp√©cime {i+1}):** (Para estimar √°rea foliar m√©dia)")
            num_folhas_amostra = st.number_input(f"Quantas folhas de amostra para o Esp√©cime {i+1}?", min_value=1, max_value=10, value=3, step=1, key=f"num_folhas_amostra_{i}")
            folhas_data_especime_list = []
            cols_folhas_amostra = st.columns(num_folhas_amostra)
            for j in range(num_folhas_amostra):
                with cols_folhas_amostra[j]:
                    st.markdown(f"üçÉ Folha {j+1}")
                    largura_folha_cm_str = st.text_input(f"Largura (cm):", "6", key=f"larg_f_{i}_{j}")
                    comprimento_folha_cm_str = st.text_input(f"Comp. (cm):", "12", key=f"comp_f_{i}_{j}")
                    folhas_data_especime_list.append((largura_folha_cm_str, comprimento_folha_cm_str))

            st.session_state.especimes_data_list.append({
                "id_user": especime_id_user, "altura_m_str": altura_m_str, "diametro_cm_str": diametro_cm_str,
                "area_copa_m2_str": area_copa_m2_str, "galhos_principais": galhos_principais,
                "folhas_data_list": folhas_data_especime_list,
                "num_folhas_por_galho_estimado": st.session_state[f"num_folhas_por_galho_estimado_{i}"]
            })

    with st.expander("üå¶Ô∏è 3. Vari√°veis Clim√°ticas M√©dias do Per√≠odo de An√°lise", expanded=True):
        st.markdown("Valores m√©dios para o per√≠odo de interesse (e.g., di√°rio, semanal, mensal).")
        temp_c_str = st.text_input("üå°Ô∏è Temperatura M√©dia do Ar (¬∞C):", "28.5", key="temp_c")
        umid_perc_str = st.text_input("üíß Umidade Relativa M√©dia do Ar (%):", "55", key="umid_perc")
        rad_mj_m2_dia_str = st.text_input("‚òÄÔ∏è Radia√ß√£o Solar Global Incidente M√©dia Di√°ria (MJ/m¬≤/dia):", "19.5", key="rad_mj")
        vento_m_s_str = st.text_input("üå¨Ô∏è Velocidade M√©dia do Vento a 2m de Altura (m/s):", "2.2", key="vento_ms")

    with st.expander("üõ†Ô∏è 4. Coeficientes do Modelo (Demonstrativo/Ajust√°vel)", expanded=False):
        st.markdown("**Modelo de Evapotranspira√ß√£o Emp√≠rico:**")
        st.caption("Estes coeficientes s√£o para o modelo linear simplificado. Em uma pesquisa de doutorado, seriam calibrados ou o modelo seria substitu√≠do.")
        cols_coeffs_et1 = st.columns(2)
        st.session_state.et_model_coeffs["altura"] = cols_coeffs_et1[0].number_input("Peso Altura:", value=st.session_state.et_model_coeffs["altura"], step=0.01, format="%.2f", key="coeff_alt")
        st.session_state.et_model_coeffs["diametro"] = cols_coeffs_et1[1].number_input("Peso Di√¢metro:", value=st.session_state.et_model_coeffs["diametro"], step=0.01, format="%.2f", key="coeff_diam")
        cols_coeffs_et2 = st.columns(2)
        st.session_state.et_model_coeffs["copa"] = cols_coeffs_et2[0].number_input("Peso √Årea Copa:", value=st.session_state.et_model_coeffs["copa"], step=0.01, format="%.2f", key="coeff_copa")
        st.session_state.et_model_coeffs["lai"] = cols_coeffs_et2[1].number_input("Peso LAI:", value=st.session_state.et_model_coeffs["lai"], step=0.01, format="%.2f", key="coeff_lai")
        cols_coeffs_et3 = st.columns(2)
        st.session_state.et_model_coeffs["temperatura"] = cols_coeffs_et3[0].number_input("Peso Temperatura:", value=st.session_state.et_model_coeffs["temperatura"], step=0.01, format="%.2f", key="coeff_temp")
        st.session_state.et_model_coeffs["umidade"] = cols_coeffs_et3[1].number_input("Peso Umidade:", value=st.session_state.et_model_coeffs["umidade"], step=0.01, format="%.3f", key="coeff_umid") # Mais precis√£o para umidade
        cols_coeffs_et4 = st.columns(2)
        st.session_state.et_model_coeffs["radiacao"] = cols_coeffs_et4[0].number_input("Peso Radia√ß√£o:", value=st.session_state.et_model_coeffs["radiacao"], step=0.001, format="%.3f", key="coeff_rad")
        st.session_state.et_model_coeffs["vento"] = cols_coeffs_et4[1].number_input("Peso Vento:", value=st.session_state.et_model_coeffs["vento"], step=0.001, format="%.3f", key="coeff_vento")
        st.session_state.et_model_coeffs["fator_escala"] = st.number_input("Fator de Escala ET Geral:", value=st.session_state.et_model_coeffs["fator_escala"], step=0.1, format="%.1f", key="coeff_escala_et")

        st.markdown("**Modelo de Absor√ß√£o de Carbono Simplificado:**")
        st.caption("Coeficientes altamente hipot√©ticos. Em pesquisa, seriam derivados de estudos ecofisiol√≥gicos detalhados para esp√©cies da Caatinga.")
        st.session_state.carbon_model_coeffs["k_aft_carbon"] = st.number_input("Coef. Carbono via AFT (kg C/m¬≤/dia):", value=st.session_state.carbon_model_coeffs["k_aft_carbon"], step=0.0001, format="%.4f", key="coeff_k_aft_c", help="Taxa m√©dia de fixa√ß√£o de Carbono por √°rea foliar.")
        st.session_state.carbon_model_coeffs["c_et_wue_carbon"] = st.number_input("Coef. Carbono via ET/WUE (kg C/L ET):", value=st.session_state.carbon_model_coeffs["c_et_wue_carbon"], step=0.0001, format="%.4f", key="coeff_c_et_wue_c", help="Proxy para Efici√™ncia no Uso da √Ågua em termos de Carbono ganho por √°gua perdida.")

    # --- Bot√£o de C√°lculo Principal ---
    st.markdown("---")
    if st.button("üöÄ Executar Simula√ß√£o e An√°lise", type="primary", key="run_simulation_button", use_container_width=True):
        st.session_state.resultados_modelo = [] # Limpa resultados anteriores

        # Validar e converter dados clim√°ticos
        try:
            temp_val = float(temp_c_str)
            umid_val = float(umid_perc_str)
            rad_val = float(rad_mj_m2_dia_str)
            vento_val = float(vento_m_s_str)
            if not (0 < umid_val <= 100):
                st.error("Umidade Relativa deve estar entre 0 e 100%.")
                st.stop()
        except ValueError:
            st.error("Erro: Verifique se todas as vari√°veis clim√°ticas s√£o n√∫meros v√°lidos.")
            st.stop()

        # Processar cada esp√©cime
        for i, especime_input_data in enumerate(st.session_state.especimes_data_list):
            try:
                altura_m = float(especime_input_data["altura_m_str"])
                diametro_cm = float(especime_input_data["diametro_cm_str"])
                area_copa_m2 = float(especime_input_data["area_copa_m2_str"])
                galhos_p = int(especime_input_data["galhos_principais"])
                num_folhas_galho_est = int(especime_input_data["num_folhas_por_galho_estimado"])


                if not (0.1 <= altura_m <= 200 and 0.1 <= diametro_cm <= 500 and 0.1 <= area_copa_m2 <= 1000):
                     st.warning(f"Esp√©cime {especime_input_data['id_user']}: Valores biom√©tricos parecem fora de um intervalo comum. Verifique as unidades e valores.")
                if galhos_p <=0 or num_folhas_galho_est <=0:
                    st.warning(f"Esp√©cime {especime_input_data['id_user']}: N√∫mero de galhos e folhas por galho deve ser positivo.")
                    aft_m2_calc = 0
                    lai_calc = 0
                else:
                    aft_m2_calc = calculate_area_foliar_total(especime_input_data["folhas_data_list"], galhos_p) # Passa num_folhas_galho_est implicitamente via session_state na fun√ß√£o
                    lai_calc = calculate_lai(aft_m2_calc, especime_input_data["area_copa_m2_str"])

                et_litros_dia_calc = predict_evapotranspiration_phd(
                    altura_m, diametro_cm, area_copa_m2, lai_calc,
                    temp_val, umid_val, rad_val, vento_val,
                    st.session_state.et_model_coeffs
                )

                carbono_aft_kg_dia, carbono_et_wue_kg_dia = estimate_carbon_absorption_phd(
                    aft_m2_calc, et_litros_dia_calc, st.session_state.carbon_model_coeffs
                )

                st.session_state.resultados_modelo.append({
                    "ID Esp√©cime": especime_input_data["id_user"],
                    "Altura (m)": altura_m,
                    "Di√¢metro (cm)": diametro_cm,
                    "√Årea Copa (m¬≤)": area_copa_m2,
                    "AFT Estimada (m¬≤)": round(aft_m2_calc, 3),
                    "LAI Estimado": lai_calc,
                    "ET Modelo (L/dia)": et_litros_dia_calc,
                    "Carbono (AFT) (kgC/dia)": carbono_aft_kg_dia,
                    "Carbono (ET/WUE) (kgC/dia)": carbono_et_wue_kg_dia
                })
            except ValueError:
                st.error(f"Erro ao processar dados do Esp√©cime {especime_input_data['id_user']}. Verifique se todos os campos num√©ricos s√£o v√°lidos.")
                continue # Pula para o pr√≥ximo esp√©cime
            except Exception as e:
                st.error(f"Erro inesperado ao processar Esp√©cime {especime_input_data['id_user']}: {e}")
                continue
        st.success(f"Simula√ß√£o conclu√≠da para {len(st.session_state.resultados_modelo)} esp√©cime(s). Veja os resultados √† direita.")

# --- Coluna da Direita: Resultados e An√°lises ---
with right_column:
    st.header("üìä Resultados da Simula√ß√£o e An√°lises")

    if not st.session_state.resultados_modelo:
        st.info("Aguardando execu√ß√£o da simula√ß√£o. Configure as entradas √† esquerda e clique em 'Executar Simula√ß√£o'.")
    else:
        df_resultados = pd.DataFrame(st.session_state.resultados_modelo)
        st.subheader("Resumo dos Resultados do Modelo:")
        st.dataframe(df_resultados.style.format("{:.2f}", subset=pd.IndexSlice[:, ['Altura (m)', 'Di√¢metro (cm)', '√Årea Copa (m¬≤)', 'AFT Estimada (m¬≤)', 'LAI Estimado', 'ET Modelo (L/dia)']]).format("{:.4f}", subset=pd.IndexSlice[:, ['Carbono (AFT) (kgC/dia)', 'Carbono (ET/WUE) (kgC/dia)']]))

        st.subheader("Visualiza√ß√µes Gr√°ficas dos Resultados do Modelo:")
        if not df_resultados.empty:
            col_g1, col_g2 = st.columns(2)
            with col_g1:
                if "ET Modelo (L/dia)" in df_resultados.columns:
                    fig_et, ax_et = plt.subplots()
                    ax_et.bar(df_resultados["ID Esp√©cime"], df_resultados["ET Modelo (L/dia)"], color='skyblue')
                    ax_et.set_xlabel("ID do Esp√©cime")
                    ax_et.set_ylabel("ET Estimada (L/dia)")
                    ax_et.set_title("Evapotranspira√ß√£o Estimada por Esp√©cime")
                    plt.xticks(rotation=45, ha="right")
                    plt.tight_layout()
                    st.pyplot(fig_et)

                    fig_hist_et, ax_hist_et = plt.subplots()
                    ax_hist_et.hist(df_resultados["ET Modelo (L/dia)"].dropna(), bins=10, color='lightblue', edgecolor='black')
                    ax_hist_et.set_xlabel("ET Estimada (L/dia)")
                    ax_hist_et.set_ylabel("Frequ√™ncia")
                    ax_hist_et.set_title("Distribui√ß√£o da ET Estimada")
                    st.pyplot(fig_hist_et)

            with col_g2:
                if "Carbono (AFT) (kgC/dia)" in df_resultados.columns:
                    fig_c, ax_c = plt.subplots()
                    ax_c.bar(df_resultados["ID Esp√©cime"], df_resultados["Carbono (AFT) (kgC/dia)"], color='lightgreen')
                    ax_c.set_xlabel("ID do Esp√©cime")
                    ax_c.set_ylabel("Carbono Estimado (kgC/dia - via AFT)")
                    ax_c.set_title("Absor√ß√£o de Carbono Estimada (via AFT)")
                    plt.xticks(rotation=45, ha="right")
                    plt.tight_layout()
                    st.pyplot(fig_c)

                    fig_hist_c, ax_hist_c = plt.subplots()
                    ax_hist_c.hist(df_resultados["Carbono (AFT) (kgC/dia)"].dropna(), bins=10, color='green', edgecolor='black')
                    ax_hist_c.set_xlabel("Carbono Estimado (kgC/dia - via AFT)")
                    ax_hist_c.set_ylabel("Frequ√™ncia")
                    ax_hist_c.set_title("Distribui√ß√£o do Carbono Estimado (via AFT)")
                    st.pyplot(fig_hist_c)
            
            if "LAI Estimado" in df_resultados.columns and not df_resultados["LAI Estimado"].empty:
                st.markdown("#### Boxplot do LAI Estimado entre Esp√©cimes")
                fig_box_lai, ax_box_lai = plt.subplots()
                ax_box_lai.boxplot(df_resultados["LAI Estimado"].dropna(), patch_artist=True, vert=False)
                ax_box_lai.set_yticklabels(['LAI'])
                ax_box_lai.set_xlabel('LAI Estimado')
                ax_box_lai.set_title('Distribui√ß√£o do LAI Estimado')
                st.pyplot(fig_box_lai)


        st.markdown("---")
        st.subheader("üî¨ Contraprova Experimental e An√°lise Estat√≠stica Comparativa")
        st.markdown("Insira abaixo os dados experimentais para compara√ß√£o com as predi√ß√µes do modelo.")

        # Coleta de dados experimentais
        st.session_state.contraprovas_data = {}
        num_medicoes_exp = st.number_input("N√∫mero de Medi√ß√µes Experimentais por Esp√©cime:", min_value=1, value=3, step=1, key="num_med_exp")
        tempo_coleta_exp_horas_str = st.text_input("Tempo de Coleta para Cada Medi√ß√£o Experimental (horas):", "24", key="tempo_coleta_exp_h")

        for _, row_modelo in df_resultados.iterrows():
            id_especime_modelo = row_modelo["ID Esp√©cime"]
            with st.container(border=True):
                st.markdown(f"**Valores Experimentais para Esp√©cime: {id_especime_modelo}**")
                medicoes_especime_list = []
                cols_med_exp = st.columns(num_medicoes_exp)
                for k in range(num_medicoes_exp):
                    with cols_med_exp[k]:
                        val_exp_ml_str = st.text_input(f"Medi√ß√£o {k+1} (mL):", "0", key=f"med_exp_{id_especime_modelo}_{k}")
                        medicoes_especime_list.append(val_exp_ml_str)
                st.session_state.contraprovas_data[id_especime_modelo] = medicoes_especime_list

        tipo_teste_estatistico = st.selectbox(
            "Escolha o Teste Estat√≠stico para Compara√ß√£o (Modelo vs. Experimental):",
            ("Teste t de Student (1 amostra)", "Teste de Wilcoxon (Signed-Rank)", "Diferen√ßa Absoluta e Percentual"),
            key="tipo_teste_stat_phd"
        )

        if st.button("üîÑ Comparar Modelo com Dados Experimentais", key="run_comparison_button", use_container_width=True):
            if not st.session_state.contraprovas_data:
                st.warning("Por favor, insira os dados experimentais.")
            else:
                try:
                    tempo_coleta_h = float(tempo_coleta_exp_horas_str)
                    if tempo_coleta_h <= 0:
                        st.error("Tempo de coleta experimental deve ser positivo.")
                        st.stop()
                except ValueError:
                    st.error("Tempo de coleta experimental inv√°lido.")
                    st.stop()

                st.markdown("### Resultados da Compara√ß√£o Estat√≠stica:")
                all_exp_means_list = []
                all_model_preds_list = []

                for _, row_modelo in df_resultados.iterrows():
                    id_especime = row_modelo["ID Esp√©cime"]
                    et_modelo_val = row_modelo["ET Modelo (L/dia)"]

                    if id_especime not in st.session_state.contraprovas_data:
                        st.warning(f"Dados experimentais n√£o fornecidos para o esp√©cime {id_especime}.")
                        continue

                    medicoes_exp_str_list = st.session_state.contraprovas_data[id_especime]
                    try:
                        medicoes_exp_ml_float = [float(m) for m in medicoes_exp_str_list]
                        medicoes_exp_L_dia = [(m_ml / 1000.0) / (tempo_coleta_h / 24.0) for m_ml in medicoes_exp_ml_float]
                        media_exp_L_dia = np.mean(medicoes_exp_L_dia)

                        all_exp_means_list.append(media_exp_L_dia)
                        all_model_preds_list.append(et_modelo_val)

                        st.markdown(f"#### An√°lise para Esp√©cime: {id_especime}")
                        st.write(f"- ET Prevista pelo Modelo: {et_modelo_val:.2f} L/dia")
                        st.write(f"- ET M√©dia Experimental: {media_exp_L_dia:.2f} L/dia (Baseado em {len(medicoes_exp_L_dia)} medi√ß√µes: {[f'{x:.2f}' for x in medicoes_exp_L_dia]})")

                        p_valor_teste_atual = None
                        if tipo_teste_estatistico == "Teste t de Student (1 amostra)":
                            if len(medicoes_exp_L_dia) < 2 or len(set(medicoes_exp_L_dia)) == 1:
                                st.warning("Teste t requer pelo menos 2 medi√ß√µes com variabilidade.")
                            else:
                                stat_t, p_valor_teste_atual = stats.ttest_1samp(medicoes_exp_L_dia, et_modelo_val)
                                st.write(f"  - Teste t: Estat√≠stica t = {stat_t:.3f}, p-valor = {p_valor_teste_atual:.4f}")
                        elif tipo_teste_estatistico == "Teste de Wilcoxon (Signed-Rank)":
                            if len(medicoes_exp_L_dia) < 1 : # scipy wilcoxon needs at least 1, but practically more
                                st.warning("Teste de Wilcoxon requer pelo menos algumas medi√ß√µes.")
                            else:
                                diffs = np.array(medicoes_exp_L_dia) - et_modelo_val
                                if np.all(diffs == 0):
                                     st.warning("Teste de Wilcoxon n√£o aplic√°vel: todas as diferen√ßas s√£o zero.")
                                else:
                                    try:
                                        stat_w, p_valor_teste_atual = stats.wilcoxon(diffs, alternative='two-sided') # Test if median of differences is zero
                                        st.write(f"  - Teste de Wilcoxon: Estat√≠stica W = {stat_w:.3f}, p-valor = {p_valor_teste_atual:.4f}")
                                    except ValueError as e_wilcoxon:
                                        st.warning(f"  - Teste de Wilcoxon n√£o p√¥de ser calculado: {e_wilcoxon}")


                        diferenca_abs = abs(media_exp_L_dia - et_modelo_val)
                        diferenca_perc = (diferenca_abs / media_exp_L_dia) * 100 if media_exp_L_dia != 0 else float('inf')
                        st.write(f"  - Diferen√ßa Absoluta: {diferenca_abs:.2f} L/dia")
                        st.write(f"  - Diferen√ßa Percentual: {diferenca_perc:.2f}%")

                        if p_valor_teste_atual is not None:
                            alpha = 0.05
                            if p_valor_teste_atual < alpha:
                                st.error(f"  - Conclus√£o: Diferen√ßa estatisticamente significativa (p < {alpha}). O modelo difere da m√©dia experimental para este esp√©cime.")
                            else:
                                st.success(f"  - Conclus√£o: Diferen√ßa n√£o estatisticamente significativa (p ‚â• {alpha}). N√£o h√° evid√™ncia forte de que o modelo difere da m√©dia experimental.")

                    except ValueError:
                        st.error(f"Erro ao converter dados experimentais para o esp√©cime {id_especime}. Verifique os valores.")
                        continue
                    except Exception as e_stat:
                        st.error(f"Erro na an√°lise estat√≠stica para {id_especime}: {e_stat}")
                        continue
                
                # An√°lise Global (se houver m√∫ltiplos esp√©cimes com dados)
                if len(all_exp_means_list) > 1 and len(all_model_preds_list) > 1:
                    st.markdown("--- \n ### An√°lise Global de Desempenho do Modelo (Comparativo)")
                    exp_means_np_global = np.array(all_exp_means_list)
                    model_preds_np_global = np.array(all_model_preds_list)

                    rmse_global = np.sqrt(mean_squared_error(exp_means_np_global, model_preds_np_global))
                    mae_global = mean_absolute_error(exp_means_np_global, model_preds_np_global)
                    try:
                        r2_global = r2_score(exp_means_np_global, model_preds_np_global)
                    except ValueError: # Can happen if only one sample or no variance
                        r2_global = np.nan

                    st.write(f"**M√©tricas Globais de Compara√ß√£o:**")
                    st.write(f"- RMSE Global: {rmse_global:.3f} L/dia")
                    st.write(f"- MAE Global: {mae_global:.3f} L/dia")
                    st.write(f"- R¬≤ Global: {r2_global:.3f}" if not np.isnan(r2_global) else "- R¬≤ Global: N/A (requer mais variabilidade/pontos)")

                    fig_scatter_global, ax_scatter_global = plt.subplots()
                    ax_scatter_global.scatter(model_preds_np_global, exp_means_np_global, alpha=0.7, edgecolors='k')
                    min_val_plot = min(min(model_preds_np_global), min(exp_means_np_global))
                    max_val_plot = max(max(model_preds_np_global), max(exp_means_np_global))
                    ax_scatter_global.plot([min_val_plot, max_val_plot], [min_val_plot, max_val_plot], 'r--', label="Linha 1:1 (Ideal)")
                    ax_scatter_global.set_xlabel("ET Prevista pelo Modelo (L/dia)")
                    ax_scatter_global.set_ylabel("ET M√©dia Experimental (L/dia)")
                    ax_scatter_global.set_title("Compara√ß√£o Global: Modelo vs. Experimental")
                    ax_scatter_global.legend()
                    ax_scatter_global.grid(True)
                    st.pyplot(fig_scatter_global)
                elif len(all_exp_means_list) <= 1:
                    st.info("An√°lise global requer dados comparativos de pelo menos dois esp√©cimes.")


# ---------------------------------------------------------------
# 11. Se√ß√£o Explicativa Expandida (N√≠vel PhD)
# ---------------------------------------------------------------
st.sidebar.title("Navega√ß√£o e Informa√ß√µes")
st.sidebar.info(f"""
**Plataforma de Simula√ß√£o e An√°lise para Pesquisa de Doutorado**
Foco: Evapotranspira√ß√£o e Din√¢mica de Carbono em Ecossistemas Semi√°ridos (Crate√∫s, Cear√°).
Vers√£o: 1.0.0 (Robusta para Discuss√£o em Banca)
Data: {pd.Timestamp.now().strftime('%Y-%m-%d')}
""")

with st.sidebar.expander("‚ö†Ô∏è Limita√ß√µes e Pr√≥ximos Passos (PhD)", expanded=False):
    st.markdown("""
    Esta ferramenta demonstra conceitos e um fluxo de an√°lise. Para uma tese de doutorado:
    - **Modelo de ET:** Implementar modelos biof√≠sicos robustos (e.g., Penman-Monteith com calibra√ß√£o de condut√¢ncia estom√°tica) ou modelos de Machine Learning (Random Forest, Redes Neurais) treinados com dados de campo extensivos de Crate√∫s.
    - **Modelo de Carbono:** Desenvolver/aplicar modelos ecofisiol√≥gicos de fotoss√≠ntese e aloca√ß√£o de carbono (e.g., Farquhar, modelos baseados em LUE - Light Use Efficiency), calibrados para esp√©cies da Caatinga.
    - **Dados de Campo:** Coleta extensiva de dados biom√©tricos, microclim√°ticos, de fluxo de seiva (para ET), e trocas gasosas (para fotoss√≠ntese/respira√ß√£o) em Crate√∫s.
    - **An√°lise de Incerteza e Sensibilidade:** Aplicar m√©todos formais (e.g., Monte Carlo, GSA) para os modelos desenvolvidos.
    - **Valida√ß√£o Cruzada:** Rigorosa para modelos de ML.
    - **q-Estat√≠stica:** Investigar se as distribui√ß√µes de vari√°veis ou erros do modelo exibem caracter√≠sticas n√£o extensivas que justifiquem a aplica√ß√£o da Estat√≠stica de Tsallis para uma descri√ß√£o mais precisa.
    - **Escalonamento Espacial:** Utilizar sensoriamento remoto e SIG para extrapolar estimativas para a paisagem de Crate√∫s.
    """)

with st.expander("üîç Fundamentos Te√≥ricos e Metodol√≥gicos (Discuss√£o para Banca)", expanded=False):
    st.markdown("### üìö Modelo de Evapotranspira√ß√£o (ET)")
    st.markdown("""
    A ET √© um componente crucial do ciclo hidrol√≥gico e do balan√ßo energ√©tico, especialmente em regi√µes semi√°ridas como Crate√∫s.
    - **Modelo Emp√≠rico Simplificado (Usado Aqui):** Uma fun√ß√£o linear ponderada de vari√°veis biom√©tricas e clim√°ticas.
        - **Vantagens:** Simplicidade, f√°cil implementa√ß√£o, √∫til para an√°lises explorat√≥rias iniciais.
        - **Desvantagens para PhD:** Falta de base biof√≠sica robusta, coeficientes arbitr√°rios sem calibra√ß√£o, n√£o captura intera√ß√µes complexas nem respostas n√£o lineares.
    - **Abordagem de Doutorado (Recomendada):**
        1.  **Modelo de Penman-Monteith (FAO-56 PM):** Padr√£o ouro, combina balan√ßo de energia com termos de transporte aerodin√¢mico e resist√™ncia superficial (condut√¢ncia estom√°tica, $g_s$). Requer calibra√ß√£o de $g_s$ para esp√©cies locais da Caatinga, considerando fatores como d√©ficit de press√£o de vapor (VPD), radia√ß√£o, umidade do solo.
            $ET_0 = \\frac{0.408 \\Delta (R_n - G) + \\gamma \\frac{900}{T+273} u_2 (e_s - e_a)}{\\Delta + \\gamma (1 + 0.34 u_2)}$ (para cultura de refer√™ncia)
            Para ET real ($ET_c$), $ET_c = K_c ET_0$ ou modelagem direta de $g_s$.
        2.  **Modelos de Machine Learning:** Random Forest, Gradient Boosting, Redes Neurais, treinados com dados de ET medidos (e.g., fluxo de seiva, lis√≠metros, covari√¢ncia de v√≥rtices) e preditores ambientais/biom√©tricos. Exigem grandes conjuntos de dados para treinamento e valida√ß√£o.
    """)

    st.markdown("### üçÇ √Årea Foliar Total (AFT) e √çndice de √Årea Foliar (LAI)")
    st.markdown("""
    - **AFT:** √Årea total de superf√≠cie foliar fotossinteticamente ativa. Crucial para trocas gasosas.
    - **LAI:** AFT por unidade de √°rea de solo ($LAI = AFT/A_{copa}$). Adimensional, indica a densidade do dossel.
    - **Estimativa (Usada Aqui):** Baseada na √°rea m√©dia de folhas de amostra e estimativas do n√∫mero de folhas. Altamente simplificado.
    - **Abordagem de Doutorado:**
        1.  **M√©todos Diretos (Destrutivos):** Coleta de todas as folhas (invi√°vel para √°rvores grandes).
        2.  **M√©todos Indiretos:**
            -   **√ìpticos:** Cept√¥metros (e.g., LAI-2000/2200), c√¢meras hemisf√©ricas, DHP (Digital Hemispherical Photography). Requerem calibra√ß√£o e corre√ß√£o para agrupamento de folhas.
            -   **Alometria:** Rela√ß√µes entre AFT/LAI e vari√°veis f√°ceis de medir (DAP, altura). Requer desenvolvimento de equa√ß√µes alom√©tricas espec√≠ficas para as esp√©cies da Caatinga em Crate√∫s.
            -   **Sensoriamento Remoto:** √çndices de vegeta√ß√£o (NDVI, EVI) de imagens de sat√©lite/drone, correlacionados com LAI medido em campo.
    """)

    st.markdown("### üå≥ Estimativa de Absor√ß√£o/Captura de Carbono")
    st.markdown("""
    A fixa√ß√£o de carbono via fotoss√≠ntese √© o principal mecanismo de entrada de C nos ecossistemas terrestres.
    - **Estimativa Simplificada (Usada Aqui):** Coeficientes fixos multiplicados por AFT ou ET. Meramente ilustrativo.
    - **Abordagem de Doutorado:**
        1.  **Modelos Ecofisiol√≥gicos de Fotoss√≠ntese:** Modelo de Farquhar, von Caemmerer & Berry (FvCB) para fotoss√≠ntese da folha, considerando limita√ß√µes por Rubisco, regenera√ß√£o de RuBP e exporta√ß√£o de triose-fosfato. Requer parametriza√ß√£o de $V_{cmax}$, $J_{max}$, etc., para esp√©cies da Caatinga.
            $A = \min(A_c, A_j, A_p) - R_d$
        2.  **Modelos Baseados em Efici√™ncia no Uso da Luz (LUE):** $NPP = APAR \times LUE_{eco}$, onde APAR √© a radia√ß√£o fotossinteticamente ativa absorvida e $LUE_{eco}$ √© a efici√™ncia do ecossistema em converter luz em biomassa. $LUE_{eco}$ √© modulada por fatores ambientais.
        3.  **Balan√ßo de Carbono do Ecossistema:** Medi√ß√µes de fluxos de CO‚ÇÇ (covari√¢ncia de v√≥rtices) para estimar a Troca L√≠quida do Ecossistema (NEE), que integra a Produtividade Prim√°ria Bruta (GPP) e a Respira√ß√£o do Ecossistema ($R_{eco}$). $NPP \approx GPP - R_a$ (respira√ß√£o autotr√≥fica).
        4.  **Aloca√ß√£o de Biomassa:** Entender como o carbono fixado √© distribu√≠do entre folhas, caules, ra√≠zes.
        5.  **Efici√™ncia no Uso da √Ågua (WUE):** $WUE = A / E$ (Fotoss√≠ntese / Transpira√ß√£o). Crucial em ambientes semi√°ridos. Varia com CO‚ÇÇ, VPD, esp√©cie.
    """)

    st.markdown("### üî¨ An√°lise Estat√≠stica e Valida√ß√£o de Modelos (PhD)")
    st.markdown("""
    - **M√©tricas de Desempenho:** RMSE, MAE, R¬≤, Bias, √çndice de Willmott (d).
    - **Testes de Hip√≥tese:** Para comparar m√©dias ou distribui√ß√µes (modelo vs. observado).
    - **An√°lise de Res√≠duos:** Verificar normalidade, homocedasticidade, aus√™ncia de autocorrela√ß√£o. Padr√µes nos res√≠duos indicam falhas do modelo.
    - **Valida√ß√£o Cruzada (k-fold, Leave-One-Out):** Essencial para modelos de ML, para avaliar a capacidade de generaliza√ß√£o.
    - **An√°lise de Incerteza:** Propaga√ß√£o de incertezas dos par√¢metros de entrada e da estrutura do modelo para as previs√µes (e.g., Monte Carlo, GLUE).
    - **An√°lise de Sensibilidade:** Identificar quais par√¢metros de entrada mais influenciam as sa√≠das do modelo (e.g., m√©todos locais OAT, m√©todos globais como Sobol).
    """)

    st.markdown("### ‚öõÔ∏è q-Estat√≠stica (Estat√≠stica de Tsallis) em Pesquisas Ecol√≥gicas")
    st.markdown("""
    A q-estat√≠stica generaliza a estat√≠stica de Boltzmann-Gibbs, sendo √∫til para sistemas complexos com:
    -   **N√£o-extensividade:** Onde a entropia de um sistema composto n√£o √© a soma das entropias das partes.
    -   **Correla√ß√µes de Longo Alcance, Efeitos de Mem√≥ria, Hierarquias Fractais.**
    -   **Distribui√ß√µes de Cauda Pesada (Power-laws):** Frequentemente observadas em dados ecol√≥gicos (e.g., distribui√ß√£o de tamanhos de organismos, frequ√™ncia de eventos extremos).

    **Aplica√ß√£o Potencial em ET e Carbono (N√≠vel PhD):**
    1.  **Modelagem de Distribui√ß√µes:** Se dados de ET, fluxos de carbono, ou erros de modelos exibirem caudas pesadas, distribui√ß√µes q-generalizadas (q-Gaussiana, q-Exponencial) podem fornecer um ajuste melhor que as distribui√ß√µes cl√°ssicas.
        -   A **q-Gaussiana** emerge da maximiza√ß√£o da q-entropia de Tsallis sob certas restri√ß√µes.
        -   A **q-Exponencial** pode descrever processos de relaxa√ß√£o ou distribui√ß√µes de probabilidade em sistemas n√£o extensivos.
    2.  **An√°lise de S√©ries Temporais:** Investigar se s√©ries temporais de fluxos exibem mem√≥ria de longo alcance ou multifractalidade, que podem ser caracterizadas usando ferramentas da q-estat√≠stica.
    3.  **Otimiza√ß√£o e Infer√™ncia:** M√©todos de otimiza√ß√£o q-generalizados (e.g., Simulated Annealing q-generalizado) ou abordagens de infer√™ncia Bayesiana com q-distribui√ß√µes.

    **Justificativa para Banca:** A aplica√ß√£o da q-estat√≠stica seria justificada se houver evid√™ncia (te√≥rica ou emp√≠rica dos dados de Crate√∫s) de que os processos ecol√≥gicos subjacentes √† ET e ao ciclo do carbono na Caatinga exibem caracter√≠sticas de sistemas complexos n√£o adequadamente descritos pela estat√≠stica tradicional. Isso representaria uma fronteira de pesquisa, buscando uma compreens√£o mais fundamental da din√¢mica do ecossistema.
    """)

st.markdown("---")
st.caption(f"Plataforma de Simula√ß√£o Avan√ßada - Vers√£o para Discuss√£o em Banca de Doutorado. {pd.Timestamp.now().strftime('%d/%m/%Y %H:%M')}")
